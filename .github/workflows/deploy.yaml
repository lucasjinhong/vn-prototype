name: Deploy to GKE

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version tag to deploy (e.g., v1.2.0)'
        required: true
      environment:
        description: 'The environment to deploy to'
        type: choice
        options: [staging, production]
        required: true

  workflow_run:
    workflows: ["Create Release Artifact"]
    types:
      - completed

jobs:
  setup:
    name: Determine Deployment Target
    runs-on: ubuntu-latest

    outputs:
      environment: ${{ steps.decide.outputs.environment }}
      version: ${{ steps.decide.outputs.version }}
      should_deploy: ${{ steps.decide.outputs.should_deploy }}

    steps:
      - name: Decide Target Environment and Version
        id: decide
        run: |
          echo "should_deploy=false" >> $GITHUB_OUTPUT

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Triggered manually."
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT

          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "Triggered by successful release. Targeting staging."
            echo "environment=staging" >> $GITHUB_OUTPUT
            VERSION=$(echo "${{ github.event.workflow_run.head_branch }}" | sed 's/refs\/tags\///')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT

          else
            echo "Triggered by a failed release. Skipping deployment."

          fi

  deploy:
    name: Deploy to ${{ needs.setup.outputs.environment }}
    runs-on: ubuntu-latest

    needs: setup
    if: needs.setup.outputs.should_deploy == 'true'

    environment:
      name: ${{ needs.setup.outputs.environment }}

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout repository for manifests
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      id: 'auth'
      with:
        create_credentials_file: 'true'
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SA_EMAIL }}

    - name: Get GKE Credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ vars.GKE_CLUSTER_NAME }}
        location: ${{ vars.GCP_REGION }}

    - name: Deploy to GKE
      run: |
        export VERSION_TO_DEPLOY=${{ needs.setup.outputs.version }}
        echo "Deploying version ${VERSION_TO_DEPLOY} to cluster: ${{ vars.GKE_CLUSTER_NAME }}"

        export IMAGE_TAG="${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ vars.GAR_REPO_NAME }}/${{ vars.IMAGE_NAME }}:${VERSION_TO_DEPLOY}"
        sed -i -E "s|^(\s*image: ).*|\1${IMAGE_TAG}|" ./kubernetes/app-deployment.yaml

        echo "Applying manifests..."
        kubectl apply -f ./kubernetes/app-deployment.yaml
        kubectl apply -f ./kubernetes/service.yaml
        
        echo "Waiting for deployment rollout to complete..."
        kubectl rollout status deployment/${{ vars.DEPLOYMENT_NAME }} --timeout=5m || echo "⚠️ Rollout timed out."